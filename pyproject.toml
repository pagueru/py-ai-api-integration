[project]
name = "py-ai-api-integration"
version = "0.1.0"
description = "Cliente Python para integração com APIs de LLM, incluindo persistência de dados."
authors = [
    { name = "Raphael Coelho", email = "raphael.phael@gmail.com" }
]
readme = "README.md"
requires-python = ">=3.13"

dependencies = [
    "httpx>=0.28.1",
    "pandas>=2.2.3",
    "pytest>=8.4.0",
    "python-dotenv>=1.1.0",
    "pyyaml>=6.0.2,<7.0.0",
    "tabulate>=0.9.0",
    "tzdata>=2025.2",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.11.0",
    "pytest>=8.3.4",
    "pre-commit>=4.0.1",
    "pytest-cov>=6.0.0",
    "mypy>=1.15.0",
]

[tool.pylint]
extension-pkg-allow-list = ["pyodbc", "numpy", "pandas"] # Permite o uso de pacotes de extensão
ignore-patterns = [".venv", ".pyenv"]                    # Ignora diretórios de ambiente
disable = [
    "R1720",             # R1720:no-else-raise
    "W1201",             # W1201:logging-not-lazy
    "R1710",             # R1710:inconsistent-return-statements
    "R1705",             # R1705:no-else-return
    "W0611",             # W0611:unused-imported
    "R0902",             # R0902:too-many-instance-attributes
    "W0511",             # FIX ME:fixme
    "fixme",             # FIX ME:fixme
]


[tool.ruff]
fix = true               # Ativa correções automáticas
target-version = "py313" # Compatível com Python 3.13
lint.select = ["ALL"]    # Ativa todas as regras de linting, análise e estilo
lint.unfixable = []      # Permite todas as correções
lint.isort.force-sort-within-sections = true # Força a ordenação dentro de seções
lint.isort.combine-as-imports = true         # Permite importações combinadas
lint.ignore = [
    "D203",              # Conflito com D211 (linha em branco antes da classe)
    "D212",              # Conflito com D213 (resumo na primeira linha)
    "COM812",            # Conflito com formatador (vírgula ausente)
    "ISC001",            # Já corrigido pelo formatador (concatenação implícita)
    "G004",              # Já corrigido pelo formatador (no-else-return)
    "S101",              # Permite o uso de assert para depuração
    "PERF401",           # Permite o uso de for-loop em vez de list comprehension para maior clareza
    "T201",              # Permite o uso de print para depuração
    "ERA001",            # Permite o uso de comentários de código comentado
    "T203",              # Permite o uso de pprint para depuração
    "ANN401",            # Permite o uso de Any em retornos de função para maior flexibilidade
    "S105",              # Permite o uso de senhas hardcoded em casos específicos
    "TRY003",            # Permite o uso de mensagens longas fora da classe de exceção para maior detalhamento

    # Permissõs temporárias para facilitar o desenvolvimento
    "D100",              # Ignora a regra que exige docstrings em módulos públicos
    "D101",              # Ignora a regra que exige docstrings em classes públicas
    "D102",              # Ignora a regra que exige docstrings em métodos públicos
    "D107",              # Ignora a regra que exige docstrings em métodos __init__
    "D103",              # Ignora a regra que exige docstrings em funções públicas
    "F401",              # Ignora a regra que exige a remoção de importações não utilizadas

    # Permissões para `TODO` e `FIXME`
    "TD001",             # Permite `TODO`  sem descrição detalhada
    "TD003",             # Permite `TODO`  sem link para issue
    "TD002",             # Permite `TODO`  sem identificação do autor
    "FIX001",            # Permite `FIXME` sem descrição detalhada
    "FIX003",            # Permite `FIXME` sem link para issue
    "FIX002",            # Permite `FIXME` sem ser tratado como erro crítico
    "EM101",             # Permite o uso de string literal diretamente em exceções

    # Regras adicinais
    "SIM401",
    "RUF001"
]
line-length = 100        # Define o comprimento da linha para 100 caracteres
exclude = [
    ".venv",
    "__pycache__",
]

[tool.ruff.format]
quote-style = "double"            # Usar aspas duplas (Black)
indent-style = "space"            # Indentação com espaços (Black)
skip-magic-trailing-comma = false # Manter vírgula mágica (Black)
line-ending = "auto"              # Detectar o tipo de quebra de linha (Black)

[tool.ruff.lint.pydocstyle]
convention = "google"             # Exigir docstrings ("numpy" ou "pep257")

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true           # Exigir anotações de tipo em __init__ e __new__
suppress-none-returning = false   # Não suprimir erros de retorno None
allow-star-arg-any = false        # Não permitir *args e **kwargs sem anotações de tipo

[tool.mypy]
strict = true                     # Ativa as verificações estritas
ignore_missing_imports = true     # Ignora erros de importação ausente
disable_error_code = [
    "import-untyped",             # Permite importações sem tipos
    "return",                     # Permite retornos sem anotações de tipo
    "no-any-return",              # Permite retornos de função com Any
    "dict-item"                   # Permite o uso de dict.items() sem anotações de tipo
]
exclude = ".venv"

[tool.pytest.ini_options]
pythonpath = [".","src"]         # Adiciona o diretório atual ao PYTHONPATH

[project.urls]
repository = "https://github.com/pagueru/py-ai-api-integration"

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"
